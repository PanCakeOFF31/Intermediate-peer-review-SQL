drop table IF EXISTS ratings CASCADE;
drop table IF EXISTS films CASCADE;
drop table IF EXISTS users CASCADE;
drop table IF EXISTS likes CASCADE;
drop table IF EXISTS friendship CASCADE;
drop table IF EXISTS genres CASCADE;
drop table IF EXISTS film_genre CASCADE;

CREATE TABLE ratings (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(32) NOT NULL CHECK(TRIM(name) <> '')
);

CREATE TABLE genres (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(32) NOT NULL UNIQUE
);

CREATE TABLE films (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(64) NOT NULL CHECK(TRIM(name) <> ''),
    description varchar(1000) NOT NULL,
    release_date date NOT NULL CHECK (release_date > '1895-12-28'),
    duration int NOT NULL CHECK (duration > 0),
    mpa int REFERENCES ratings(id),
    UNIQUE(name, description)
);

CREATE TABLE film_genre (
    film_id int REFERENCES films(id),
    genre_id int REFERENCES genres(id),
    UNIQUE (film_id, genre_id)
);

CREATE TABLE users (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email varchar(128) NOT NULL CHECK(email ~ ('^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$')) UNIQUE,
    login varchar(64) NOT NULL CHECK(TRIM(name) <> '') UNIQUE,
    name varchar(64) NULL,
    birthday date CHECK (birthday < NOW())
);

CREATE TABLE likes (
        film_id int REFERENCES films(id),
        user_id int REFERENCES users(id),
        UNIQUE(film_id, user_id)
);

CREATE TABLE friendship (
    user_id int REFERENCES users(id),
    friend_id int REFERENCES users(id),
    is_confirmed boolean DEFAULT false,
    UNIQUE(user_id, friend_id)
);